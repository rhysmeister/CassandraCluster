---
# tasks file for CassandraCluster
  - name: Ensure OpenJDK is not installed
    yum:
      name: "java*openjdk*"
      state: "absent"

  - name: Check if Oracle JDK rpm has already been downloaded
    stat:
      path: "/tmp/{{ oracle_jdk_rpm_url | basename }}"
    delegate_to: 127.0.0.1
    run_once: "yes"
    become: "no"
    register: jdk_rpm

  - name: Get Oracle JDK rpm
    get_url:
      url:     "{{ oracle_jdk_rpm_url }}"
      headers: 'Cookie:oraclelicense=accept-securebackup-cookie'
      dest:    "/tmp"
    delegate_to: 127.0.0.1
    become: "no"
    run_once: "yes"
    when: deploy_mode == True and jdk_rpm.stat.exists == False

  - name: Output jdk rpm path
    debug:
      msg: "/tmp/{{ oracle_jdk_rpm_url | basename }}"
      verbosity: 2

  - name: Copy file to hosts
    copy:
      src: "/tmp/{{ oracle_jdk_rpm_url | basename }}"
      dest: "/home/vagrant"
    when: deploy_mode

  - name: Install Oracle JVM rpm
    yum:
      name: "{{ oracle_jdk_rpm_url | basename }}"
      state: "present"
    when: deploy_mode

  - name: Create Hard link to java
    file:
      src: /usr/java/jdk1.8.0_181-amd64/bin/java
      dest: /usr/bin/java
      state: link

  - name: Set FQDN
    lineinfile:
      dest: /etc/hostname
      regexp: "^{{ ansible_nodename }}*"
      line: "{{ ansible_nodename }}.local"
    register: fqdn_set
    when: '"local" not in ansible_hostname'

  - name: Set hosts file entry
    lineinfile:
      dest: /etc/hosts
      regexp: "{{ ansible_eth1.ipv4.address }} {{ ansible_hostname }} {{ ansible_hostname }}"
      line: "{{ ansible_eth1.ipv4.address }} {{ ansible_hostname }} {{ ansible_hostname }}"

  - name: Restart network
    service:
      name: network
      state: restarted
    when: fqdn_set.changed

  - name: Disable Swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Remove swap partitions
    mount:
      path: swap
      state: absent

  - name: Ensure Swappiness is 0
    sysctl:
      name: vm.swappiness
      value: 0
      sysctl_set: yes
      reload: yes

  - name: Ensure max_map_count is 131072
    sysctl:
      name: vm.max_map_count
      value: 1048575
      sysctl_set: yes
      reload: yes

  - name: Install ntp
    yum:
      name: "{{ ntp_packages }}"
      state: present

  - name: Ensure ntp service starts
    service:
      name: ntpd
      enabled: yes
      state: started

  - name: Ensure limits are set
    lineinfile:
      path: /etc/security/limits.conf
      regexp: "^{{ item }}"
      line: "{{ item }}"
      state: present
    with_items: "{{ limits }}"

  - name: Extra Limit for RH Derived Distros
    lineinfile:
      path: /etc/security/limits.d/90-nproc.conf
      regexp: "^\\* - nproc 32768"
      line: "* - nproc 32768"
      create: yes

  - name: Add Cassandra Repository
    yum_repository:
      name: Cassandra
      description: Cassandra
      baseurl: "{{ cassandra_yum_repo_url }}"
      gpgcheck: 1
      gpgkey: "{{ cassandra_yum_repo_gpgkey_url }}"
      state: present

  - name: Install additional packages
    yum:
      name: "{{ additional_packages }}"
      state: present

  - name: yum-clean-metadata
    command: yum clean metadata
    args:
      warn: no

  - name: Install Cassandra & Tools
    yum:
      name: "{{ cassandra_packages }}"
      state: present
      update_cache: yes
    when: deploy_mode

  - name: Include vars file for cassandra
    include_vars:
      file: "vars/cassandra.yaml"

  - name: Copy template cassandra.yaml
    template:
      src: "templates/cassandra.yaml.j2"
      dest: "/etc/cassandra/conf/cassandra.yaml"
      owner: "cassandra"
      group: "cassandra"
      mode: 0751
      backup: "yes"

  - name: Ensure data folder owner is correct
    file:
      path: "{{ item }}"
      state: directory
      owner: cassandra
      group: cassandra
    with_items:
      - "/var/lib/cassandra/"
      - "/backup/"

  # Workaround to get around this issue preventing cnode5 starting...
  # Other bootstrapping/leaving/moving nodes detected, cannot bootstrap while cassandra.consistent.rangemovement is true
  - name: Staged Cassandra Service Start
    # serial: 1 would be the proper solution here, but that can only be set on play level
    # upstream issue: https://github.com/ansible/ansible/issues/12170
    run_once: true
    with_items: "{{ play_hosts }}"
    delegate_to: "{{ item }}"
    shell: "sleep 60 && /usr/sbin/service cassandra start"
    when: deploy_mode == True

  - name: Download cdm to cassandra_admin_node
    get_url:
      url: "{{ cdm_url }}"
      dest: /usr/bin
    when: ansible_hostname == cassandra_admin_node and deploy_mode == True

  - name: cdm permissions
    file:
      path: "/usr/bin/cdm"
      mode: "0755"
    when: ansible_hostname == cassandra_admin_node

  - name: Install cdm datasets
    command: "cdm install {{ item }} --rf {{ cassandra_replication_factor }} --host {{ ansible_hostname }} "
    args:
      creates: /var/lib/cassandra/data/killrvideo
    with_items: "{{ cdm_datasets }}"
    when: ansible_hostname == cassandra_admin_node and deploy_mode == True
    become: "no"


  - name: Remove commented out authenticator var in cassandra.yaml
    lineinfile:
      path: "/etc/cassandra/conf/cassandra.yaml"
      regexp: "^#authenticator: \"{{ cassandra_configuration.authenticator }}\""
      line: "authenticator: {{ cassandra_configuration.authenticator }}"

  - name: Remove commented out auth vars in cassandra.yaml
    lineinfile:
      path: "/etc/cassandra/conf/cassandra.yaml"
      regexp: "^#authorizer: \"{{ cassandra_configuration.authorizer }}\""
      line: "authorizer: {{ cassandra_configuration.authorizer }}"
    register: cassandra_restarted_needed

  - name: Restart cassandra service
    service:
      name: "cassandra"
      state: "restarted"
      enabled: "yes"
    when: cassandra_restarted_needed.changed == True

  - name: Wait a little
    pause:
      minutes: 1
    when: cassandra_restarted_needed.changed == True

  - name: Check if anon access is enabled
    command: cqlsh
    environment:
      CQLSH_HOST: "{{ ansible_eth1.ipv4.address }}"
    when: ansible_hostname == cassandra_admin_node
    register: anon_access_possible
    failed_when: "'Remote end requires authentication' not in anon_access_possible.stderr"

  - name: Check if default admin account is enabled
    command: cqlsh -u cassandra -p cassandra -e "DESCRIBE KEYSPACES"
    environment:
      CQLSH_HOST: "{{ ansible_eth1.ipv4.address }}"
    when: ansible_hostname == cassandra_admin_node
    ignore_errors: yes
    register: default_admin_access_possible

  - name: Output default_admin_access_possible variable
    debug:
      var: default_admin_access_possible
      verbosity: 2

  - name: Generate CQL file to create new admin user
    copy:
      content: "CREATE ROLE {{ cassandra_admin_user }} WITH PASSWORD = '{{ cassandra_admin_user_pwd }}' AND SUPERUSER = true AND LOGIN = true;"
      dest: "/home/vagrant/cassandra_admin_user.cql"
    when: ansible_hostname == cassandra_admin_node and default_admin_access_possible.rc == 0

  - name: Run admin create script if needed
    command: cqlsh -u cassandra -p cassandra -f /home/vagrant/cassandra_admin_user.cql
    environment:
      CQLSH_HOST: "{{ ansible_eth1.ipv4.address }}"
    when: ansible_hostname == cassandra_admin_node and default_admin_access_possible.rc == 0
    failed_when: admin_create.rc != 0 and 'admin already exists' not in admin_create.stderr
    register: admin_create

  - name: Generate CQL file to modify default cassandra admin user
    copy:
      content: "ALTER ROLE cassandra WITH PASSWORD = 'sdf345fsdfsrt3reyadsduvfds632gebhsafaseryuusihfsutdfuw' AND SUPERUSER=false;"
      dest: "/home/vagrant/cassandra_default_admin_user.cql"
    when: ansible_hostname == cassandra_admin_node and default_admin_access_possible.rc == 0

  - name: Run CQL script to modify default cassandra user
    command: cqlsh -u {{ cassandra_admin_user }} -p '{{ cassandra_admin_user_pwd }}' -f /home/vagrant/cassandra_default_admin_user.cql
    environment:
      CQLSH_HOST: "{{ ansible_eth1.ipv4.address }}"
    when: ansible_hostname == cassandra_admin_node and default_admin_access_possible.rc == 0

  - name: Create /home/vagrant/.cassandra directory
    file:
      path: "/home/vagrant/.cassandra"
      state: "directory"
    become: "no"

  - name: Create .cassandra/cqlshrc file
    copy:
      content: |
        [authentication]
        username = {{ cassandra_admin_user }}
        password = {{ cassandra_admin_user_pwd }}

        [connection]
        hostname = {{ ansible_hostname }}
        port = 9042
      dest: "/home/vagrant/.cassandra/cqlshrc"
      mode: "0700"
    become: "no"

  - name: Remove CQL files if needed
    file:
      path: "{{ item }}"
      state: absent
    with_items: ["/home/vagrant/cassandra_admin_user.cql", "/home/vagrant/cassandra_default_admin_user.cql"]
    when: ansible_hostname == cassandra_admin_node
